"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const escape_regexp_1 = __importDefault(require("escape-regexp"));
const sequelize_1 = require("sequelize");
const uuidRegex = /^[0-9A-F]{8}-[0-9A-F]{4}-[5|4|3|2|1][0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i;
const convertFilter = (filter) => {
    if (!filter) {
        return {};
    }
    return filter.reduce((memo, filterProperty) => {
        const { property, value, path: filterPath } = filterProperty;
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        const [_, index] = filterPath.split('.');
        const isArray = typeof index !== 'undefined' && !Number.isNaN(Number(index));
        const previousValue = memo[property.name()] || {};
        switch (property.type()) {
            case 'string': {
                if (property.sequelizePath.values || uuidRegex.test(value.toString())) {
                    return {
                        [property.name()]: { [sequelize_1.Op.eq]: `${(0, escape_regexp_1.default)(value)}` },
                        ...memo,
                    };
                }
                if (isArray) {
                    return {
                        ...memo,
                        [property.name()]: {
                            [sequelize_1.Op.in]: [...(previousValue[sequelize_1.Op.in] || []), (0, escape_regexp_1.default)(value)],
                        },
                    };
                }
                return {
                    ...memo,
                    [sequelize_1.Op.and]: [
                        ...(memo[sequelize_1.Op.and] || []),
                        {
                            [property.name()]: {
                                [sequelize_1.Op.like]: `%${(0, escape_regexp_1.default)(value)}%`,
                            },
                        },
                    ],
                };
            }
            case 'boolean': {
                let bool;
                if (value === 'true')
                    bool = true;
                if (value === 'false')
                    bool = false;
                if (bool === undefined)
                    return memo;
                if (isArray) {
                    return {
                        ...memo,
                        [property.name()]: {
                            [sequelize_1.Op.in]: [
                                ...(previousValue[sequelize_1.Op.in] || []),
                                bool,
                            ],
                        },
                    };
                }
                return {
                    ...memo,
                    [property.name()]: bool,
                };
            }
            case 'number': {
                if (!Number.isNaN(Number(value))) {
                    if (isArray) {
                        return {
                            ...memo,
                            [property.name()]: {
                                [sequelize_1.Op.in]: [...(previousValue[sequelize_1.Op.in] || []), Number(value)],
                            },
                        };
                    }
                    return {
                        [property.name()]: Number(value),
                        ...memo,
                    };
                }
                return memo;
            }
            case 'date':
            case 'datetime': {
                if (value.from || value.to) {
                    return {
                        [property.name()]: {
                            ...(value.from && { [sequelize_1.Op.gte]: value.from }),
                            ...(value.to && { [sequelize_1.Op.lte]: value.to }),
                        },
                        ...memo,
                    };
                }
                break;
            }
            default:
                break;
        }
        if (isArray) {
            return {
                ...memo,
                [property.name()]: {
                    [sequelize_1.Op.in]: [...(previousValue[sequelize_1.Op.in] || []), value],
                },
            };
        }
        return {
            [property.name()]: value,
            ...memo,
        };
    }, {});
};
exports.default = convertFilter;
//# sourceMappingURL=convert-filter.js.map